{"ast":null,"code":"var React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar ReactDOMServer = require(\"react-dom/server\");\nvar detectEvents = require(\"./src/events/detect\");\nvar constructorFromGlobal = require(\"./src/getConstructor/fromGlobal\");\nvar constructorFromRequireContextWithGlobalFallback = require(\"./src/getConstructor/fromRequireContextWithGlobalFallback\");\nconst _require = require(\"./src/renderHelpers\"),\n  supportsHydration = _require.supportsHydration,\n  reactHydrate = _require.reactHydrate,\n  createReactRootLike = _require.createReactRootLike;\nvar ReactRailsUJS = {\n  // This attribute holds the name of component which should be mounted\n  // example: `data-react-class=\"MyApp.Items.EditForm\"`\n  CLASS_NAME_ATTR: 'data-react-class',\n  // This attribute holds JSON stringified props for initializing the component\n  // example: `data-react-props=\"{\\\"item\\\": { \\\"id\\\": 1, \\\"name\\\": \\\"My Item\\\"} }\"`\n  PROPS_ATTR: 'data-react-props',\n  // This attribute holds which method to use between: ReactDOM.hydrate, ReactDOM.render\n  RENDER_ATTR: 'data-hydrate',\n  // A unique identifier to identify a node\n  CACHE_ID_ATTR: \"data-react-cache-id\",\n  TURBOLINKS_PERMANENT_ATTR: \"data-turbolinks-permanent\",\n  // If jQuery is detected, save a reference to it for event handlers\n  jQuery: typeof window !== 'undefined' && typeof window.jQuery !== 'undefined' && window.jQuery,\n  components: {},\n  // helper method for the mount and unmount methods to find the\n  // `data-react-class` DOM elements\n  findDOMNodes: function (searchSelector) {\n    var classNameAttr = ReactRailsUJS.CLASS_NAME_ATTR;\n    // we will use fully qualified paths as we do not bind the callbacks\n    var selector, parent;\n    switch (typeof searchSelector) {\n      case 'undefined':\n        selector = '[' + classNameAttr + ']';\n        parent = document;\n        break;\n      case 'object':\n        selector = '[' + classNameAttr + ']';\n        parent = searchSelector;\n        break;\n      case 'string':\n        selector = searchSelector + '[' + classNameAttr + '], ' + searchSelector + ' [' + classNameAttr + ']';\n        parent = document;\n        break;\n      default:\n        break;\n    }\n    if (ReactRailsUJS.jQuery) {\n      return ReactRailsUJS.jQuery(selector, parent);\n    } else {\n      return parent.querySelectorAll(selector);\n    }\n  },\n  // Get the constructor for a className (returns a React class)\n  // Override this function to lookup classes in a custom way,\n  // the default is ReactRailsUJS.ComponentGlobal\n  getConstructor: constructorFromGlobal,\n  // Given a Webpack `require.context`,\n  // try finding components with `require`,\n  // then falling back to global lookup.\n  useContext: function (requireContext) {\n    this.getConstructor = constructorFromRequireContextWithGlobalFallback(requireContext);\n  },\n  // Render `componentName` with `props` to a string,\n  // using the specified `renderFunction` from `react-dom/server`.\n  serverRender: function (renderFunction, componentName, props) {\n    var componentClass = this.getConstructor(componentName);\n    var element = React.createElement(componentClass, props);\n    return ReactDOMServer[renderFunction](element);\n  },\n  // Within `searchSelector`, find nodes which should have React components\n  // inside them, and mount them with their props.\n  mountComponents: function (searchSelector) {\n    var ujs = ReactRailsUJS;\n    var nodes = ujs.findDOMNodes(searchSelector);\n    for (var i = 0; i < nodes.length; ++i) {\n      var node = nodes[i];\n      var className = node.getAttribute(ujs.CLASS_NAME_ATTR);\n      var constructor = ujs.getConstructor(className);\n      var propsJson = node.getAttribute(ujs.PROPS_ATTR);\n      var props = propsJson && JSON.parse(propsJson);\n      var hydrate = node.getAttribute(ujs.RENDER_ATTR);\n      var cacheId = node.getAttribute(ujs.CACHE_ID_ATTR);\n      var turbolinksPermanent = node.hasAttribute(ujs.TURBOLINKS_PERMANENT_ATTR);\n      if (!constructor) {\n        var message = \"Cannot find component: '\" + className + \"'\";\n        if (console && console.log) {\n          console.log(\"%c[react-rails] %c\" + message + \" for element\", \"font-weight: bold\", \"\", node);\n        }\n        throw new Error(message + \". Make sure your component is available to render.\");\n      } else {\n        var component = this.components[cacheId];\n        if (component === undefined) {\n          component = React.createElement(constructor, props);\n          if (turbolinksPermanent) {\n            this.components[cacheId] = component;\n          }\n        }\n        if (hydrate && supportsHydration()) {\n          component = reactHydrate(node, component);\n        } else {\n          const root = createReactRootLike(node);\n          component = root.render(component);\n        }\n      }\n    }\n  },\n  // Within `searchSelector`, find nodes which have React components\n  // inside them, and unmount those components.\n  unmountComponents: function (searchSelector) {\n    var nodes = ReactRailsUJS.findDOMNodes(searchSelector);\n    for (var i = 0; i < nodes.length; ++i) {\n      var node = nodes[i];\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  },\n  // Check the global context for installed libraries\n  // and figure out which library to hook up to (pjax, Turbolinks, jQuery)\n  // This is called on load, but you can call it again if needed\n  // (It will unmount itself)\n  detectEvents: function () {\n    detectEvents(this);\n  }\n};\n\n// These stable references are so that handlers can be added and removed:\nReactRailsUJS.handleMount = function (e) {\n  var target = undefined;\n  if (e && e.target) {\n    target = e.target;\n  }\n  ReactRailsUJS.mountComponents(target);\n};\nReactRailsUJS.handleUnmount = function (e) {\n  var target = undefined;\n  if (e && e.target) {\n    target = e.target;\n  }\n  ReactRailsUJS.unmountComponents(target);\n};\nif (typeof window !== \"undefined\") {\n  // Only setup events for browser (not server-rendering)\n  ReactRailsUJS.detectEvents();\n}\n\n// It's a bit of a no-no to populate the global namespace,\n// but we really need it!\n// We need access to this object for server rendering, and\n// we can't do a dynamic `require`, so we'll grab it from here:\nself.ReactRailsUJS = ReactRailsUJS;\nmodule.exports = ReactRailsUJS;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}